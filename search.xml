<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(10)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(10)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(9)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(9)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(8)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(8)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(7)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(7)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(6)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(6)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(5)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(5)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(4)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(4)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(3)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(3)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(2)/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC%20(2)/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2018/12/13/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/12/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09/"/>
      <url>/2018/12/12/Python3%20%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%20C09/</url>
      
        <content type="html"><![CDATA[<center><font color="#4094C7" size="4">Python3 自学笔记第九章【文件和异常】</font></center><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 自学笔记 C09</title>
      <link href="/2018/12/10/%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/12/10/%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
